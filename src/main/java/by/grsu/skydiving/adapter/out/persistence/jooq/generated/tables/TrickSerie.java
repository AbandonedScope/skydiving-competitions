/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class TrickSerie extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.trick_serie</code>
     */
    public static final TrickSerie TRICK_SERIE = new TrickSerie();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.trick_serie.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.trick_serie.competition_member_detail_id</code>.
     */
    public final TableField<Record, Long> COMPETITION_MEMBER_DETAIL_ID = createField(DSL.name("competition_member_detail_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.trick_serie.referee_id</code>.
     */
    public final TableField<Record, Long> REFEREE_ID = createField(DSL.name("referee_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.trick_serie.score</code>.
     */
    public final TableField<Record, Integer> SCORE = createField(DSL.name("score"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.trick_serie.serie_number</code>.
     */
    public final TableField<Record, Integer> SERIE_NUMBER = createField(DSL.name("serie_number"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.trick_serie.time_without_penalty</code>.
     */
    public final TableField<Record, Double> TIME_WITHOUT_PENALTY = createField(DSL.name("time_without_penalty"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.trick_serie.round_number</code>.
     */
    public final TableField<Record, Integer> ROUND_NUMBER = createField(DSL.name("round_number"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.trick_serie.is_time_submitted</code>.
     */
    public final TableField<Record, Boolean> IS_TIME_SUBMITTED = createField(DSL.name("is_time_submitted"), SQLDataType.BOOLEAN.defaultValue(DSL.field(DSL.raw("false"), SQLDataType.BOOLEAN)), this, "");

    private TrickSerie(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private TrickSerie(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.trick_serie</code> table reference
     */
    public TrickSerie(String alias) {
        this(DSL.name(alias), TRICK_SERIE);
    }

    /**
     * Create an aliased <code>public.trick_serie</code> table reference
     */
    public TrickSerie(Name alias) {
        this(alias, TRICK_SERIE);
    }

    /**
     * Create a <code>public.trick_serie</code> table reference
     */
    public TrickSerie() {
        this(DSL.name("trick_serie"), null);
    }

    public <O extends Record> TrickSerie(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, TRICK_SERIE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return (Identity<Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.TRICK_SERIE_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.TRICK_SERIE__TRICK_SERIE_COMPETITION_MEMBER_DETAIL_ID_FKEY, Keys.TRICK_SERIE__TRICK_SERIE_REFEREE_ID_FKEY);
    }

    private transient CompetitionMemberDetail _competitionMemberDetail;
    private transient Referee _referee;

    /**
     * Get the implicit join path to the
     * <code>public.competition_member_detail</code> table.
     */
    public CompetitionMemberDetail competitionMemberDetail() {
        if (_competitionMemberDetail == null)
            _competitionMemberDetail = new CompetitionMemberDetail(this, Keys.TRICK_SERIE__TRICK_SERIE_COMPETITION_MEMBER_DETAIL_ID_FKEY);

        return _competitionMemberDetail;
    }

    /**
     * Get the implicit join path to the <code>public.referee</code> table.
     */
    public Referee referee() {
        if (_referee == null)
            _referee = new Referee(this, Keys.TRICK_SERIE__TRICK_SERIE_REFEREE_ID_FKEY);

        return _referee;
    }

    @Override
    public TrickSerie as(String alias) {
        return new TrickSerie(DSL.name(alias), this);
    }

    @Override
    public TrickSerie as(Name alias) {
        return new TrickSerie(alias, this);
    }

    @Override
    public TrickSerie as(Table<?> alias) {
        return new TrickSerie(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrickSerie rename(String name) {
        return new TrickSerie(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrickSerie rename(Name name) {
        return new TrickSerie(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrickSerie rename(Table<?> name) {
        return new TrickSerie(name.getQualifiedName(), null);
    }
}
