/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Public;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class UserInfoView extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_info_view</code>
     */
    public static final UserInfoView USER_INFO_VIEW = new UserInfoView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.user_info_view.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.user_info_view.login</code>.
     */
    public final TableField<Record, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR(40), this, "");

    /**
     * The column <code>public.user_info_view.password</code>.
     */
    public final TableField<Record, String> PASSWORD =
        createField(DSL.name("password"), SQLDataType.VARCHAR(500), this, "");

    /**
     * The column <code>public.user_info_view.first_name</code>.
     */
    public final TableField<Record, String> FIRST_NAME =
        createField(DSL.name("first_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.user_info_view.second_name</code>.
     */
    public final TableField<Record, String> SECOND_NAME =
        createField(DSL.name("second_name"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.user_info_view.patronymic</code>.
     */
    public final TableField<Record, String> PATRONYMIC =
        createField(DSL.name("patronymic"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>public.user_info_view.role</code>.
     */
    public final TableField<Record, Short> ROLE = createField(DSL.name("role"), SQLDataType.SMALLINT, this, "");

    private UserInfoView(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private UserInfoView(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
            create view "user_info_view" as  SELECT id,
              login,
              password,
              first_name,
              second_name,
              patronymic,
              role
             FROM user_info
            WHERE (is_deleted IS FALSE);
            """));
    }

    /**
     * Create an aliased <code>public.user_info_view</code> table reference
     */
    public UserInfoView(String alias) {
        this(DSL.name(alias), USER_INFO_VIEW);
    }

    /**
     * Create an aliased <code>public.user_info_view</code> table reference
     */
    public UserInfoView(Name alias) {
        this(alias, USER_INFO_VIEW);
    }

    /**
     * Create a <code>public.user_info_view</code> table reference
     */
    public UserInfoView() {
        this(DSL.name("user_info_view"), null);
    }

    public <O extends Record> UserInfoView(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, USER_INFO_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UserInfoView as(String alias) {
        return new UserInfoView(DSL.name(alias), this);
    }

    @Override
    public UserInfoView as(Name alias) {
        return new UserInfoView(alias, this);
    }

    @Override
    public UserInfoView as(Table<?> alias) {
        return new UserInfoView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfoView rename(String name) {
        return new UserInfoView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfoView rename(Name name) {
        return new UserInfoView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInfoView rename(Table<?> name) {
        return new UserInfoView(name.getQualifiedName(), null);
    }
}
