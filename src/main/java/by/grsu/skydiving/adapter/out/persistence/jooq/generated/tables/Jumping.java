/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Keys;
import generated.Public;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class Jumping extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.jumping</code>
     */
    public static final Jumping JUMPING = new Jumping();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.jumping.id</code>.
     */
    public final TableField<Record, Long> ID =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.jumping.competition_member_detail_id</code>.
     */
    public final TableField<Record, Long> COMPETITION_MEMBER_DETAIL_ID =
        createField(DSL.name("competition_member_detail_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.jumping.referee_id</code>.
     */
    public final TableField<Record, Long> REFEREE_ID =
        createField(DSL.name("referee_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jumping.attempt_number</code>.
     */
    public final TableField<Record, Integer> ATTEMPT_NUMBER =
        createField(DSL.name("attempt_number"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.jumping.height</code>.
     */
    public final TableField<Record, Double> HEIGHT = createField(DSL.name("height"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.jumping.speed</code>.
     */
    public final TableField<Record, Double> SPEED = createField(DSL.name("speed"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.jumping.accuracy</code>.
     */
    public final TableField<Record, Double> ACCURACY =
        createField(DSL.name("accuracy"), SQLDataType.DOUBLE.nullable(false), this, "");

    /**
     * The column <code>public.jumping.time_delay_of_parachut_opening</code>.
     */
    public final TableField<Record, Double> TIME_DELAY_OF_PARACHUT_OPENING =
        createField(DSL.name("time_delay_of_parachut_opening"), SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>public.jumping.jumping_number</code>.
     */
    public final TableField<Record, Integer> JUMPING_NUMBER = createField(DSL.name("jumping_number"),
        SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.jumping.jumping_number_during_year</code>.
     */
    public final TableField<Record, Integer> JUMPING_NUMBER_DURING_YEAR =
        createField(DSL.name("jumping_number_during_year"),
            SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.jumping.jumping_number_billable</code>.
     */
    public final TableField<Record, Integer> JUMPING_NUMBER_BILLABLE = createField(DSL.name("jumping_number_billable"),
        SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field(DSL.raw("0"), SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.jumping.performance_date</code>.
     */
    public final TableField<Record, LocalDate> PERFORMANCE_DATE =
        createField(DSL.name("performance_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.jumping.aircraft</code>.
     */
    public final TableField<Record, String> AIRCRAFT =
        createField(DSL.name("aircraft"), SQLDataType.VARCHAR(70), this, "");

    /**
     * The column <code>public.jumping.aviation</code>.
     */
    public final TableField<Record, String> AVIATION =
        createField(DSL.name("aviation"), SQLDataType.VARCHAR(70), this, "");

    /**
     * The column <code>public.jumping.parachut_id</code>.
     */
    public final TableField<Record, Long> PARACHUT_ID =
        createField(DSL.name("parachut_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.jumping.skydiver_id</code>.
     */
    public final TableField<Record, Long> SKYDIVER_ID =
        createField(DSL.name("skydiver_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Jumping(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private Jumping(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.jumping</code> table reference
     */
    public Jumping(String alias) {
        this(DSL.name(alias), JUMPING);
    }

    /**
     * Create an aliased <code>public.jumping</code> table reference
     */
    public Jumping(Name alias) {
        this(alias, JUMPING);
    }

    /**
     * Create a <code>public.jumping</code> table reference
     */
    public Jumping() {
        this(DSL.name("jumping"), null);
    }

    public <O extends Record> Jumping(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, JUMPING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return (Identity<Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.JUMPING_PKEY;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.JUMPING__JUMPING_COMPETITION_MEMBER_DETAIL_ID_FKEY,
            Keys.JUMPING__JUMPING_REFEREE_ID_FKEY, Keys.JUMPING__JUMPING_SKYDIVER_ID_FKEY);
    }

    private transient CompetitionMemberDetail _competitionMemberDetail;
    private transient Referee _referee;
    private transient Skydiver _skydiver;

    /**
     * Get the implicit join path to the
     * <code>public.competition_member_detail</code> table.
     */
    public CompetitionMemberDetail competitionMemberDetail() {
        if (_competitionMemberDetail == null) {
            _competitionMemberDetail =
                new CompetitionMemberDetail(this, Keys.JUMPING__JUMPING_COMPETITION_MEMBER_DETAIL_ID_FKEY);
        }

        return _competitionMemberDetail;
    }

    /**
     * Get the implicit join path to the <code>public.referee</code> table.
     */
    public Referee referee() {
        if (_referee == null)
            _referee = new Referee(this, Keys.JUMPING__JUMPING_REFEREE_ID_FKEY);

        return _referee;
    }

    /**
     * Get the implicit join path to the <code>public.skydiver</code> table.
     */
    public Skydiver skydiver() {
        if (_skydiver == null)
            _skydiver = new Skydiver(this, Keys.JUMPING__JUMPING_SKYDIVER_ID_FKEY);

        return _skydiver;
    }

    @Override
    public Jumping as(String alias) {
        return new Jumping(DSL.name(alias), this);
    }

    @Override
    public Jumping as(Name alias) {
        return new Jumping(alias, this);
    }

    @Override
    public Jumping as(Table<?> alias) {
        return new Jumping(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Jumping rename(String name) {
        return new Jumping(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Jumping rename(Name name) {
        return new Jumping(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Jumping rename(Table<?> name) {
        return new Jumping(name.getQualifiedName(), null);
    }
}
