/*
 * This file is generated by jOOQ.
 */

package generated.tables;


import generated.Keys;
import generated.Public;
import java.util.Arrays;
import java.util.List;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class CompetitionCollegium extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.competition_collegium</code>
     */
    public static final CompetitionCollegium COMPETITION_COLLEGIUM = new CompetitionCollegium();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.competition_collegium.id</code>.
     */
    public final TableField<Record, Long> ID =
        createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.competition_collegium.competition_id</code>.
     */
    public final TableField<Record, Long> COMPETITION_ID =
        createField(DSL.name("competition_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private CompetitionCollegium(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private CompetitionCollegium(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.competition_collegium</code> table
     * reference
     */
    public CompetitionCollegium(String alias) {
        this(DSL.name(alias), COMPETITION_COLLEGIUM);
    }

    /**
     * Create an aliased <code>public.competition_collegium</code> table
     * reference
     */
    public CompetitionCollegium(Name alias) {
        this(alias, COMPETITION_COLLEGIUM);
    }

    /**
     * Create a <code>public.competition_collegium</code> table reference
     */
    public CompetitionCollegium() {
        this(DSL.name("competition_collegium"), null);
    }

    public <O extends Record> CompetitionCollegium(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, COMPETITION_COLLEGIUM);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<Record, Long> getIdentity() {
        return (Identity<Record, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<Record> getPrimaryKey() {
        return Keys.COMPETITION_COLLEGIUM_PK;
    }

    @Override
    public List<ForeignKey<Record, ?>> getReferences() {
        return Arrays.asList(Keys.COMPETITION_COLLEGIUM__COMPETITION_COLLEGIUM_COMPETITION_ID_FK);
    }

    private transient Competition _competition;

    /**
     * Get the implicit join path to the <code>public.competition</code> table.
     */
    public Competition competition() {
        if (_competition == null) {
            _competition = new Competition(this, Keys.COMPETITION_COLLEGIUM__COMPETITION_COLLEGIUM_COMPETITION_ID_FK);
        }

        return _competition;
    }

    @Override
    public CompetitionCollegium as(String alias) {
        return new CompetitionCollegium(DSL.name(alias), this);
    }

    @Override
    public CompetitionCollegium as(Name alias) {
        return new CompetitionCollegium(alias, this);
    }

    @Override
    public CompetitionCollegium as(Table<?> alias) {
        return new CompetitionCollegium(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CompetitionCollegium rename(String name) {
        return new CompetitionCollegium(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompetitionCollegium rename(Name name) {
        return new CompetitionCollegium(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CompetitionCollegium rename(Table<?> name) {
        return new CompetitionCollegium(name.getQualifiedName(), null);
    }
}
