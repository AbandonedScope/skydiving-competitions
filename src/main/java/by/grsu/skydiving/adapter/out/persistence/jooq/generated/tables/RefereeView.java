/*
 * This file is generated by jOOQ.
 */
package generated.tables;


import generated.Public;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class RefereeView extends TableImpl<Record> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.referee_view</code>
     */
    public static final RefereeView REFEREE_VIEW = new RefereeView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Record> getRecordType() {
        return Record.class;
    }

    /**
     * The column <code>public.referee_view.id</code>.
     */
    public final TableField<Record, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.referee_view.category</code>.
     */
    public final TableField<Record, Integer> CATEGORY =
        createField(DSL.name("category"), SQLDataType.INTEGER, this, "");

    private RefereeView(Name alias, Table<Record> aliased) {
        this(alias, aliased, null);
    }

    private RefereeView(Name alias, Table<Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
            create view "referee_view" as  SELECT referee.id,
              referee.category
             FROM referee
            WHERE (referee.is_deleted = false);
            """));
    }

    /**
     * Create an aliased <code>public.referee_view</code> table reference
     */
    public RefereeView(String alias) {
        this(DSL.name(alias), REFEREE_VIEW);
    }

    /**
     * Create an aliased <code>public.referee_view</code> table reference
     */
    public RefereeView(Name alias) {
        this(alias, REFEREE_VIEW);
    }

    /**
     * Create a <code>public.referee_view</code> table reference
     */
    public RefereeView() {
        this(DSL.name("referee_view"), null);
    }

    public <O extends Record> RefereeView(Table<O> child, ForeignKey<O, Record> key) {
        super(child, key, REFEREE_VIEW);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public RefereeView as(String alias) {
        return new RefereeView(DSL.name(alias), this);
    }

    @Override
    public RefereeView as(Name alias) {
        return new RefereeView(alias, this);
    }

    @Override
    public RefereeView as(Table<?> alias) {
        return new RefereeView(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefereeView rename(String name) {
        return new RefereeView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefereeView rename(Name name) {
        return new RefereeView(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefereeView rename(Table<?> name) {
        return new RefereeView(name.getQualifiedName(), null);
    }
}
